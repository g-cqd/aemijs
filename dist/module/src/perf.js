import{getGlobal as t,newUID as s}from"./utils.js";export class Benchmark{constructor(s={}){this.perf=t().performance,this.options={_logging:s.logging||!1,_iterations:void 0,_last:void 0},this.match={},this.metrics=new Map,this.pool=new Map,this.testPool=new Map,this.ticks=[]}static get uid(){return s(10)}set last(t){this.options._last=t}get last(){return this.options._last}get logging(){return this.options._logging}get iterations(){return this.options._iterations}set iterations(t){this.options._iterations=t}add(t,s,...o){const{uid:e}=Benchmark;return this.last=e,this.match[e]=t,this.pool.set(e,(()=>{let i,n=0,r=0;const l=this.testPool.get(e);let h;if(l)do{h=this.perf.now();const e=s(...o);if(n+=this.perf.now()-h,!l(e))throw console.group(`Test Failed - ${t}`),console.error("Test Function",l),console.error("Tested Result",e),console.groupEnd(`Test Failed - ${t}`),new Error("Test failed.")}while(r++,n<5e3);else{h=this.perf.now();do{s(...o)}while(r++,(i=this.perf.now())<h+5e3);n=i-h}const c=r/(n/1e3),a={ops:c,elapsed:n,iterations:r};return console.log(`Func ${t}\n\t> ${c.toFixed(3)} op/s\n\t> ${r} op`),this.metrics.set(e,a),a})),this}test(t){const{last:s}=this;return this.testPool.set(s,t),this.last=void 0,this}start(){const t=this.perf.now();this.logging&&console.warn(`Started ${t} ms after page load.`),this.ticks.push(t)}tick(){const t=this.perf.now(),s=t-this.ticks[this.ticks.length-1];return this.logging&&console.log(`Lap : ${s} ms`),this.ticks.push(t),s}stop(){const t=this.perf.now(),s=t-this.ticks[this.ticks.length-1],o=t-this.ticks[0];return this.logging&&(s!==o&&console.log(`Lap : ${s} ms`),console.log(`Total : ${o} ms`),console.warn(`Ended ${t} ms after page load.`)),this.ticks.push(t),o}run(){const t=[...this.pool.keys()],s=[...this.pool.values()];console.group("Execution");const o=s.map((t=>t()));console.groupEnd();const e=o.map((({ops:s},o)=>[t[o],s])).sort((([t,s],[o,e])=>e-s));return console.group("Results"),e.forEach((([t,s],o)=>{console.log(`#${o+1} -- Func ${this.match[t]}\n\t> ${s.toFixed(3)} op/s`)})),console.groupEnd(),this}}export default{Benchmark};