import{getLastPath as e,removeStartingSlash as r}from"./utils.js";export class PromiseHandler{constructor(){this.listeners=Object.create(null),this.addListener("default",(e=>e)),this.worker.onmessage=e=>this.listen(e),this.worker._=this.proxy}get worker(){return globalThis||self||window}get proxy(){return new Proxy(this,{get:(e,r)=>r in e?e[r]:(t,s)=>e.addListener(r,t,s||{accessor:"data"})})}listen(e){const{id:r,data:t}=e.data;"object"==typeof t&&"type"in t&&t.type in this.listeners?this.listeners[t.type](r,t,e):this.listeners.default(r,t,e)}addListener(e,r,t={}){const{keepEvent:s,accessor:o}=t;this.listeners[e]=(e,t,n)=>{const i=o?t[o]:t,a=r(...s?[n,i]:[i]);a instanceof Promise?(a.then((r=>this.worker.postMessage({id:e,data:r}))),a.catch(console.error)):this.worker.postMessage({id:e,data:a})}}}export class ExtendedWorker{static get globalThis(){return globalThis||self||window}static get global(){return"ExtendedWorkers"in this.globalThis?this.globalThis.ExtendedWorkers:this.globalThis.ExtendedWorkers=Object.assign(Object.create(null),{length:0})}static add(e){const r=ExtendedWorker.global,t=r.length++;return r[t]=e,t}static get(e){return ExtendedWorker.global[e]}static delete(e){ExtendedWorker.global[e]=null}static terminateAll(){const e=ExtendedWorker.global;for(const r in e)e[r]&&e[r].terminate()}static onMessage(e){const{id:{workerId:r,messageId:t},err:s,data:o}=e.data,n=ExtendedWorker.get(r),i=n.resolves[t],a=n.rejects[t];s?a&&s&&a(s):i&&i(o),n.delete(t),console.timeEnd(`${r}::${t} - Total`)}static get Handler(){return PromiseHandler}static get scriptHandler(){return`()=>(globalThis||self||window).listeners=new (${PromiseHandler.toString()})();`}static get moduleHandler(){return`(globalThis||self||window)._=(new (${PromiseHandler.toString()})()).proxy;`}static importLocalScripts(e={}){const t=[];if("localImports"in e){const{localImports:s}=e;if("string"==typeof s)t.push(`${window.location.origin}/${r(s)}`);else{if(!Array.isArray(t))throw new Error("WorkerOptions.localImports is not correctly defined.");t.push(...t.map((e=>`${window.location.origin}/${r(e)}`)))}}return t}static importScripts(e={}){const r=[];if("importScripts"in e){const{importScripts:t}=e;if("string"==typeof t)r.push(t);else{if(!Array.isArray(t))throw new Error("WorkerOptions.importScripts is not correctly defined.");r.push(...t)}}return r}static importModuleLocalScripts(t={}){const s=[];if("localImports"in t){const{localImports:o}=t;if("string"==typeof o)s.push(`import ${e(o)} from '${window.location.origin}/${o}';`);else{if(!Array.isArray(o))throw new Error("WorkerOptions.localImports is not correctly defined.");for(const t of o)if("string"==typeof t)s.push(`import ${e(t)} from '${window.location.origin}/${r(t)}';`);else if("object"==typeof t){if(!("objects"in t||"*"in t||"name"in t)||!("path"in t))throw new Error("WorkerOptions.importScripts is not correctly defined.");const{objects:e,"*":o,name:n,path:i}=t;if(n)s.push(`import ${n} from '${window.location.origin}/${r(i)}';`);else if(o)s.push(`import ${e?"string"==typeof e?`{ ${e} },`:`{ ${e.join(",")} }, `:""}* as ${o} from '${window.location.origin}/${r(i)}';`);else{if(!e)throw new Error("WorkerOptions.importScripts is not correctly defined.");s.push(`import ${e?"string"==typeof e?`{ ${e} },`:`{ ${e.join(",")} } `:""} from '${window.location.origin}/${r(i)}';`)}}}}return"includeHandler"in t&&!0===t.includeHandler&&s.push(ExtendedWorker.moduleHandler),s}static importModuleScripts(r={}){const t=[];if("importScripts"in r){const{importScripts:s}=r;if("string"==typeof s)t.push(`import ${e(s)} from '${s}';`);else{if(!Array.isArray(s))throw new Error("WorkerOptions.importScripts is not correctly defined.");for(const r of s)if("string"==typeof r)t.push(`import ${e(r)} from '${r}';`);else if("object"==typeof r){if(!("objects"in r||"*"in r||"name"in r)||!("path"in r))throw new Error("WorkerOptions.importScripts is not correctly defined.");const{objects:e,"*":s,name:o,path:n}=r;if(o)t.push(`import ${o} from '${n}';`);else if(s)t.push(`import ${e?"string"==typeof e?`{ ${e} },`:`{ ${e.join(",")} }, `:""}* as ${s} from '${n}';`);else{if(!e)throw new Error("WorkerOptions.importScripts is not correctly defined.");t.push(`import ${e?"string"==typeof e?`{ ${e} },`:`{ ${e.join(",")} } `:""} from '${n}';`)}}}}return t}static getHandlerAsURL(){return ExtendedWorker.toObjectURL(`(${ExtendedWorker.scriptHandler})();`)}static uglifyScriptWorker(e){if("string"==typeof e)return ExtendedWorker.toObjectURL(e);throw new Error("WorkerString is not a string.")}static prepareForModuleImport(e,r={}){if("string"!=typeof e)throw new Error("WorkerString is not a string.");const t=[...ExtendedWorker.importModuleLocalScripts(r),...ExtendedWorker.importModuleScripts(r)];let s;if("uglify"in r&&!0===r.uglify)throw new Error("WorkerOptions.uglify can not be applied to module worker.");return s=`${t.length>0?`${t.join("\n")}\n`:""}(${e})();`,ExtendedWorker.toObjectURL(s)}static prepareForScriptImport(e,r={}){if("string"!=typeof e)throw new Error("WorkerString is not a string.");const t=[...ExtendedWorker.importLocalScripts(r),...ExtendedWorker.importScripts(r)];let s;return"includeHandler"in r&&!0===r.includeHandler&&t.push(ExtendedWorker.getHandlerAsURL()),"uglify"in r&&!0===r.uglify?(t.push(ExtendedWorker.uglifyScriptWorker(e)),s=`importScripts("${t.join('","')}");`):s=`${t.length>0?`importScripts("${t.join('","')}");\n`:""}(${e})();`,ExtendedWorker.toObjectURL(s)}static toObjectURL(e){return URL.createObjectURL(new Blob([e],{type:"application/javascript"}))}static createObjectURL(e,r={}){if("object"==typeof r){if("type"in r&&"module"===r.type)return ExtendedWorker.prepareForModuleImport(e,r);if("type"in r&&"module"!==r.type&&"classic"!==r.type)throw new Error(`WorkerOptions.type:${r.type} is not a valid type.`);return ExtendedWorker.prepareForScriptImport(e,r)}if("string"==typeof e)return ExtendedWorker.toObjectURL(e);throw new Error("WorkerString is not a string.")}static new(e,r={}){return new ExtendedWorker(e,{promise:!0,type:"module",includeHandler:!0,...r}).proxy}static async run(e,r,t){const s=ExtendedWorker.new(`async()=>_.run(${e})`),o=await s.run(r,t);return s.terminate(),o}constructor(e,r){let t;if("function"==typeof e)t=ExtendedWorker.createObjectURL(e.toString(),r);else{if("string"!=typeof e)throw new Error("WorkerObject is not a string or a function.");t=ExtendedWorker.createObjectURL(e,r)}const s=ExtendedWorker.add(this);Object.defineProperty(this,"internals",{value:Object.preventExtensions(Object.assign(Object.create(null),{workerId:s,name:(r?r.name:void 0)||s,worker:new Worker(t,r),promise:r&&r.promise,resolves:Object.create(null),rejects:Object.create(null),requests:0}))}),r&&"promise"in r&&!0===r.promise&&(this.worker.onmessage=ExtendedWorker.onMessage)}get worker(){return this.internals.worker}get workerId(){return this.internals.workerId}get promise(){return this.internals.promise}get resolves(){return this.internals.resolves}get rejects(){return this.internals.rejects}get requests(){return this.internals.requests++}get proxy(){return new Proxy(this,{get:(e,r)=>r in e?e[r]:(t,s)=>e.postMessage({type:r,data:t},s)})}set onmessage(e){this.worker.onmessage=e}get onmessage(){return this.worker.onmessage}set onerror(e){this.worker.onerror=e}get onerror(){return this.worker.onerror}set onmessageerror(e){this.worker.onmessageerror=e}get onmessageerror(){return this.worker.onmessageerror}delete(e){delete this.resolves[e],delete this.rejects[e]}dispatchEvent(e){return this.worker.dispatchEvent(e)}addEventListener(e,r,t){return this.worker.addEventListener(e,r,t)}removeEventListener(e,r,t){this.worker.removeEventListener(e,r,t)}terminate(){this.worker.terminate(),ExtendedWorker.delete(this.workerId)}postMessage(e,r){const{worker:t,workerId:s,promise:o,requests:n}=this;if(console.time(`${s}::${n} - Total`),o){const o=n,i={id:Object.assign(Object.create(null),{workerId:s,messageId:o}),data:e};return new Promise(((e,s)=>{this.resolves[o]=e,this.rejects[o]=s,r?t.postMessage(i,r):t.postMessage(i)}))}t.postMessage(e,r)}}export class Cluster{static get globalThis(){return globalThis||self||window}static get global(){return"Clusters"in this.globalThis?this.globalThis.Clusters:this.globalThis.Clusters=Object.assign(Object.create(null),{length:0,internals:Object.preventExtensions(Object.assign(Object.create(null),{DEFAULT_SIZE:4}))})}static set DEFAULT_SIZE(e){this.global.internals.DEFAULT_SIZE=e}static get DEFAULT_SIZE(){return this.global.internals.DEFAULT_SIZE}static add(e){const r=Cluster.global,t=r.length++;return r[t]=e,t}static get(e){return Cluster.global[e]}static delete(e){const r=Cluster.global;r[e]&&(r[e]=null)}static terminateAll(){const e=Cluster.global;for(const r in e)e[r].terminate()}static new(e,r={size:Cluster.DEFAULT_SIZE}){return new Cluster(e,{promise:!0,type:"module",includeHandler:!0,...r}).proxy}static async run(e,r,t){const s=Cluster.new(`async()=>_.run(${e})`,{size:Cluster.DEFAULT_SIZE}),o=await s.run(r,t);return s.terminate(),o}static async $run(e,r,t){const s=Cluster.new(`async()=>_.run(${e})`,{size:Cluster.DEFAULT_SIZE}),o=await s.$run(r,t);return s.terminate(),o}static async _run(e,r,t){const s=Cluster.new(`async()=>_.run(${e})`,{size:Cluster.DEFAULT_SIZE}),o=await s._run(r,t);return s.terminate(),o}static async $_run(e,r,t){const s=Cluster.new(`async()=>_.run(${e})`,{size:Cluster.DEFAULT_SIZE}),o=await s.$_run(r,t);return s.terminate(),o}static parsePropertyDecorator(e){if("string"==typeof e){const{groups:r}=e.match(/^(?<race>\$)?(?<spread>_)?/u),t=Boolean(r.race),s=Boolean(r.spread);return{modes:{race:t,spread:s},property:e.slice(t+s)}}return e}constructor(e,r){const t=Cluster.add(this);Object.defineProperty(this,"internals",{value:Object.preventExtensions(Object.assign(Object.create(null),{workers:[],clusterId:t,size:r?r.size:Cluster.DEFAULT_SIZE}))});for(let t=0;t<this.size;t++)this.workers.push(new ExtendedWorker(e,r))}get proxy(){return new Proxy(this,{get:(e,r)=>{if(r in e)return e[r];const{modes:t,property:s}=Cluster.parsePropertyDecorator(r);return(r,o)=>e.postMessage({type:s},void 0,{modes:t,data:r,transferable:o})}})}get workers(){return this.internals.workers}get clusterId(){return this.internals.clusterId}get size(){return this.internals.size}dispatchEvent(e){return this.workers.map((r=>r.dispatchEvent(e)))}addEventListener(e,r,t){return this.workers.map((s=>s.addEventListener(e,r,t)))}removeEventListener(e,r,t){return this.workers.map((s=>s.removeEventListener(e,r,t)))}postMessage(e,r,{modes:{race:t,spread:s}={},data:o,transferable:n}={}){if(void 0!==t||void 0!==s)switch(!0){case t&&s:return Promise.race(this.workers.map(((r,t)=>r.postMessage({...e,data:o[t]},n?n[t]:null))));case t:return Promise.race(this.workers.map((r=>r.postMessage({...e,data:o},n))));case s:return Promise.all(this.workers.map(((r,t)=>r.postMessage({...e,data:o[t]},n?n[t]:null))));default:return Promise.all(this.workers.map((r=>r.postMessage({...e,data:o},n))))}return Promise.all(this.workers.map((t=>t.postMessage(e,r))))}terminate(){this.workers.forEach((e=>e.terminate())),Cluster.delete(this.clusterId)}}export default{ExtendedWorker,PromiseHandler,Cluster};