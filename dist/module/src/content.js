import{getGlobal as e,objectForEach as t}from"./utils.js";import{ExtendedWorker as r}from"./multithread.js";export class MarkdownParser{constructor(e){this.worker=new r((()=>{globalThis.onmessage=function(e){globalThis.postMessage({id:e.data.id,data:{data:marked.marked(e.data.data)}})}}),{promise:!0,importScripts:e||"https://cdn.jsdelivr.net/npm/marked/marked.min.js"})}async parse(e){return(await this.worker.postMessage(e)).data}terminate(){this.worker.terminate()}}export class VariableManager{constructor(){const t=e();if("VariableManager"in t){if(t.VariableManager!==this)throw new Error("You are allowed to instantiate only one VariableManager per page")}else t.VariableManager=this,this.map={}}register(e,t){const r="object"==typeof t?t:{},{exec:a,parser:n}=r;if(e in this.map||!a&&!n)throw new Error("Key already registered or invalid object");this.map[e]={exec:a,parser:n}}execute(){const{body:e}=document,r=[e],a=[];for(;r.length>0;){const e=r.shift(),{length:t}=e.childNodes;for(let n=0;n<t;n+=1){const t=e.childNodes[n];[1,11].includes(t.nodeType)?r.unshift(t):[3,8].includes(t.nodeType)&&/\{\{(?:.|\n|\r)*\}\}/gu.test(t.textContent)&&a.push(t.parentNode)}const{length:n}=e.attributes;for(let t=0;t<n;t+=1){const r=e.attributes[t];/\{\{(?:.|\n|\r)*\}\}/gu.test(r.value)&&a.push(r)}}for(const e of a)if(2===e.nodeType){const r=e.nodeValue;t(this.map,(async(t,a)=>{const n=new RegExp(`\\{\\{${t}:?(?:.|\\n|\\r)*?\\}\\}`,"gu").exec(r);if(n&&1===n.length){const[r]=n.filter((e=>e)),{parser:s,exec:o}=a,i=o(VariableManager.parse(t,s,r));e.nodeValue=i instanceof Promise?await i:i}}))}else t(this.map,(async(t,r)=>{let a=e.innerHTML;e.innerHTML="";const n=new RegExp(`\\{\\{${t}:?(?:.|\\n|\\r)*?\\}\\}`,"gu"),s=a.match(n);if(s&&s.length>0){const{parser:e,exec:n}=r;for(const r of s){let s=a.indexOf(r);for(;(s=a.indexOf(r))>-1;){const o=a.substring(0,s),i=a.substring(s+r.length),c=n(VariableManager.parse(t,e,r));if(c instanceof Promise){const e=await c;a=e instanceof Element?o+e.outerHTML+i:e instanceof Node?o+e.textContent+i:o+e+i}else a=c instanceof Element?o+c.outerHTML+i:c instanceof Node?o+c.textContent+i:o+c+i}}}e.innerHTML=a}))}async asyncExecute(){this.execute()}static parse(e,t,r){if(r.length<4+e.length+1+3)return{};return r.slice(2+e.length+1,r.length-2).split(/;/gu).reduce(((e,r)=>{const[a,n]=r.split(/[=]/u);if(a in t){if("number"===t[a])try{e[a]=Number(n)}catch(e){console.error(e)}else if("symbol"===t[a])try{e[a]=Symbol(n)}catch(e){console.error(e)}else if("string"===t[a])e[a]=n.toString();else if("boolean"===t[a])try{e[a]=Boolean(n)}catch(e){console.error(e)}}else e[a]=n;return e}),{})}static execute(){const t=e();if(!("VariableManager"in t))throw new Error("VariableManager was not instantiated.");return t.VariableManager.execute()}static asyncExecute(){const t=e();if(!("VariableManager"in t))throw new Error("VariableManager was not instantiated.");return t.VariableManager.asyncExecute()}}export default{MarkdownParser,VariableManager};